import { DataSource } from "typeorm";
import { Gabinete } from "../models/user/Gabinete";
import { Direcao } from "../models/user/direcao";

interface DirecaoSeed {
    nome: string;
    codigo: string;
    descricao: string;
    gabinetes: {
        nome: string;
        codigo: string;
        descricao: string;
    }[];
}

export const seedDirecoesEspeciais = async (AppDataSource: DataSource) => {
    const direcaoRepo = AppDataSource.getRepository(Direcao);
    const gabineteRepo = AppDataSource.getRepository(Gabinete);

    const direcoes: DirecaoSeed[] = [
        {
            nome: "Dire√ß√£o de Prote√ß√£o e Seguran√ßa",
            codigo: "dps",
            descricao:
                "Respons√°vel pela prote√ß√£o f√≠sica e seguran√ßa das instala√ß√µes, sistemas de vigil√¢ncia, controlo de acessos e gest√£o de incidentes de seguran√ßa",
            gabinetes: [
                {
                    nome: "Gabinete de Seguran√ßa F√≠sica",
                    codigo: "gsf",
                    descricao: "Prote√ß√£o f√≠sica das instala√ß√µes e controlo de acessos",
                },
                {
                    nome: "Gabinete de Sistemas de Vigil√¢ncia",
                    codigo: "gsv",
                    descricao: "Gest√£o de sistemas CCTV, alarmes e monitoriza√ß√£o",
                },
                {
                    nome: "Gabinete de Gest√£o de Incidentes",
                    codigo: "ggi",
                    descricao: "Resposta e gest√£o de incidentes de seguran√ßa",
                },
            ],
        },
        {
            nome: "Gabinetes de Suporte e Opera√ß√µes",
            codigo: "gso",
            descricao:
                "Respons√°vel pelo suporte t√©cnico, opera√ß√µes do dia-a-dia, manuten√ß√£o de equipamentos e resolu√ß√£o de incidentes operacionais",
            gabinetes: [
                {
                    nome: "Gabinete de Suporte T√©cnico",
                    codigo: "gst",
                    descricao:
                        "Suporte t√©cnico a utilizadores e resolu√ß√£o de incidentes",
                },
                {
                    nome: "Gabinete de Opera√ß√µes de Rede",
                    codigo: "gor",
                    descricao: "Gest√£o e monitoriza√ß√£o da infraestrutura de rede",
                },
                {
                    nome: "Gabinete de Manuten√ß√£o Preventiva",
                    codigo: "gmp",
                    descricao:
                        "Manuten√ß√£o preventiva de equipamentos e sistemas",
                },
            ],
        },
        {
            nome: "Dire√ß√£o de Jur√≠dico e Organiza√ß√£o",
            codigo: "djo",
            descricao:
                "Respons√°vel pelos assuntos jur√≠dicos, conformidade legal, gest√£o de contratos e organiza√ß√£o interna",
            gabinetes: [
                {
                    nome: "Gabinete Jur√≠dico",
                    codigo: "gj",
                    descricao: "Assessoria jur√≠dica e conformidade legal",
                },
                {
                    nome: "Gabinete de Contratos",
                    codigo: "gc",
                    descricao: "Gest√£o e revis√£o de contratos e acordos",
                },
                {
                    nome: "Gabinete de Organiza√ß√£o e Processos",
                    codigo: "gop",
                    descricao: "Otimiza√ß√£o de processos e organiza√ß√£o interna",
                },
            ],
        },
        {
            nome: "Dire√ß√£o de Administra√ß√£o e Gest√£o",
            codigo: "admin",
            descricao:
                "Respons√°vel pela administra√ß√£o financeira, recursos humanos, patrim√≥nio e gest√£o administrativa",
            gabinetes: [
                {
                    nome: "Gabinete Financeiro",
                    codigo: "gf",
                    descricao: "Gest√£o financeira, or√ßamentos e contabilidade",
                },
                {
                    nome: "Gabinete de Recursos Humanos",
                    codigo: "grh",
                    descricao: "Gest√£o de pessoal, recrutamento e forma√ß√£o",
                },
                {
                    nome: "Gabinete de Patrim√≥nio",
                    codigo: "gp",
                    descricao: "Gest√£o do patrim√≥nio e invent√°rio",
                },
            ],
        },
    ];

    const resultados: {
        direcao: Direcao;
        gabinetes: Gabinete[];
    }[] = [];

    for (const direcaoData of direcoes) {
        const codigoDirecao = direcaoData.codigo.toLowerCase();

        // ‚öôÔ∏è Verifica se a dire√ß√£o j√° existe
        let direcao = await direcaoRepo.findOne({
            where: { codigo: codigoDirecao },
        });

        if (!direcao) {
            direcao = direcaoRepo.create({
                nome: direcaoData.nome,
                codigo: codigoDirecao,
                descricao: direcaoData.descricao,
            });
            direcao = await direcaoRepo.save(direcao);
            console.log(`‚úÖ Dire√ß√£o criada: ${direcao.nome} (${codigoDirecao})`);
        } else {
            console.log(`‚ÑπÔ∏è Dire√ß√£o j√° existente: ${direcao.nome} (${codigoDirecao})`);
        }

        // ‚öôÔ∏è Cria os gabinetes associados
        const gabinetes: Gabinete[] = [];

        for (const gabData of direcaoData.gabinetes) {
            const codigoGab = gabData.codigo.toLowerCase();
            const existente = await gabineteRepo.findOne({
                where: { codigo: codigoGab },
            });

            if (!existente) {
                const novoGab = gabineteRepo.create({
                    nome: gabData.nome,
                    codigo: codigoGab,
                    descricao: gabData.descricao,
                    direcao,
                });
                const saved = await gabineteRepo.save(novoGab);
                gabinetes.push(saved);
                console.log(`  ‚úÖ Gabinete criado: ${gabData.nome} (${codigoGab})`);
            } else {
                console.log(`  ‚ÑπÔ∏è Gabinete j√° existente: ${gabData.nome} (${codigoGab})`);
            }
        }

        resultados.push({ direcao, gabinetes });
    }

    console.log("üéØ Seed de dire√ß√µes especiais conclu√≠do com sucesso!\n");

    return resultados;
};
